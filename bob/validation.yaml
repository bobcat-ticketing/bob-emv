swagger: '2.0'
info:
  version: 3.2.0
  title: BoB.Validation.API
host: schemas.mobileticket.se
basePath: /api/v3
schemes:
  - https
paths:
  '/validation/{ticketId}':
    post:
      tags:
        - validation
      summary: Validate ticket by ticket identifier
      description: |
        Validate ticket by ticket identifier and return a reference to a ticket event.

        **Online validation** - If an eventResult is not provided, the result of
                             the validation is not known and the server is
                             requested to perform validation. In this case, the
                             MTB must be submitted via a query parameter.

        **Offline validation** - If an eventResult is provided, the result of the
                             validation is known and the server does not have to
                             perform validation. In this case, the MTB does not need
                             to be submitted via a query parameter.
      operationId: validateTicket
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: ticketId
          in: path
          description: Ticket Identifier
          required: true
          type: string
          format: string
        - name: validationEvent
          in: body
          description: Validation event
          required: true
          schema:
            $ref: '#/definitions/ticketEvent'
        - name: mtb
          in: query
          description: MTB
          required: false
          type: string
          format: base64url
      responses:
        '201':
          description: Created
          headers:
            location:
              description: "URI of the new ticketEvent, see RFC 2616 section 14.30"
              type: string
          schema:
            $ref: '#/definitions/ticketEventResult'
        '303':
          description: Ticket event already exists
          headers:
            location:
              description: "URI of the existing ticketEvent, see RFC 2616 section 14.30"
              type: string
        '401':
          description: Unauthorised
        '404':
          description: Ticket not found
  '/validation':
    post:
      tags:
        - validation
      summary: Report already performed validations
      description: |
        Already performed offline validations may be submitted in batch via
        validationReport. The entire batch must be accepted/rejected - there's
        no status reporting on individual events. Online validation is not
        supported.
      operationId: reportValidations
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: validationReport
          in: body
          description: Validation report
          required: true
          schema:
            $ref: '#/definitions/validationReport'
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorised
  '/blacklist':
    get:
      tags:
        - blacklist
      summary: Get blacklist
      description: |
        Blacklists are used, as the name indicates, to block certain
        elements (tickets, travellers or tokens) from an otherwise
        successful validation. The current ticket/token/traveller
        blacklist is provided via the getBlacklist call. Only
        blacklist entries added since the provided blacklistEntryId
        will be returned. There's no guarantee that the entries will
        be provided in consecutive order nor that no blacklistEntryId
        will be skipped. Blacklist entries may contain an expire
        property. Expired entries may be discarded/ignored by the caller.
        To remove an element from the blacklist, add another blacklist entry
        for the same element id with expire set to current time (or earlier).
      operationId: getBlacklist
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: blacklistEntryId
          in: query
          description: Get blacklist entries added after blacklistEntryId
          required: true
          type: integer
          format: int64
        - name: limit
          in: query
          description: Number of entries per result
          required: false
          type: integer
          minimum: 1
        - name: skip
          in: query
          description: Number of entries to skip until result
          required: false
          type: integer
          minimum: 0
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/blacklist'
        '401':
          description: Unauthorised
        '404':
          description: Blacklist not found
  '/whitelist':
    get:
      tags:
        - whitelist
      summary: Get whitelist
      description: |
        The whitelist is a mechamism used with ID-based travelling
        where the travel entitlements tied to a certain token is
        distriubuted to the validating devices. The purpose of the
        whitelist function is to account for situations where online
        checks are unreliable. By having the validating devices
        looking up travel entitlements locally from the whitelist,
        validation can be performed reliably and securely even in
        offline scenarios or when connections to the validation
        endpoint is slow. Each whitelist entry contains the ticket
        information required to perform the same validation as had
        the ticket information been conveyed through the MTB.
      operationId: getWhitelist
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: whitelistEntryId
          in: query
          description: Get whitelist entries added after whitelistEntryId
          required: true
          type: integer
          format: int64
        - name: limit
          in: query
          description: Number of entries per result
          required: false
          type: integer
          minimum: 1
        - name: skip
          in: query
          description: Number of entries to skip until result
          required: false
          type: integer
          minimum: 0
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/whitelist'
        '401':
          description: Unauthorised
        '404':
          description: Whitelist not found
  '/ticklemacros':
    get:
      tags:
        - validation
      summary: Get all TICKLE macro sets
      description: |
        Retrieve all TICKLE macro sets. There is no expire mechanism
        and validators are expected to update TICKLE macros periodically.
      operationId: getAllTickleMacrosets
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation, return TICKLE macro sets
          schema:
            type: array
            items:
              $ref: '#/definitions/tickleMacros'
        '404':
          description: No TICKLE macro sets found
  '/ticklemacros/{serial}':
    get:
      tags:
        - validation
      summary: Get TICKLE macros set
      description: |
        Retrieve a TICKLE macro set for a specific serial number. There is no expire
        mechanism and validators are expected to update TICKLE macros periodically.
      operationId: getTickleMacroset
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: serial
          in: path
          description: Get TICKLE macros with the specified serial number
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Successful operation, return TICKLE macro set
          schema:
            $ref: '#/definitions/tickleMacros'
        '404':
          description: TICKLE macro set not found
  '/fraudcheck':
    get:
      tags:
        - fraudcheck
      summary: Get time and distance delta of last validation event
      description: |
        The fraudcheck call results in a velocity calculated as follows:
        - The caller provides a reference to a MTB, a time and
          a geographical position
        - The callee looks up the time and geographical position of the
          last ticket event for the given MTB
        - The callee returns the calculated velocity given the time/geopos
        The response must only be given once per validation event and client.
        Velocity less than 5 km/h or distances less than 1 km shall render 0 km/h.
        The resulting velocity is used to determine possible fraud. If the
        velocity is higher than any available mode of transportation, the
        ticket has most likely been copied and presented at different locations.
      operationId: fraudcheck
      produces:
        - application/json
      parameters:
        - name: X-BoB-AuthToken
          in: header
          description: JWT authentication token
          required: true
          type: string
        - name: fraudcheckData
          in: body
          description: Validated MTB, time and position
          required: true
          schema:
            $ref: '#/definitions/fraudcheckData'
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/fraudcheckResponse'
        '401':
          description: Unauthorised
        '403':
          description: Forbidden, sent on more than one validation event per client
definitions:
  fraudcheckData:
    description: N.B. - fraud check data MUST NOT be retained by respondent
    type: object
    required:
      - geo
      - mtbReference
    properties:
      time:
        description: Timestamp as ISO 8601:2004 profile extended format (MTS8, chapter 2.3)
        format: date-time
        type: string
        example: "2021-08-17T09:15:00Z"
      geo:
        $ref: '#/definitions/geoPosition'
      mtbReference:
        $ref: '#/definitions/mtbReference'
  fraudcheckResponse:
    description: N.B. - response MUST only be given once per validation event and client. Velocity <= 5 km/h or distance <= 1 km shall render 0 km/h.
    type: object
    required:
      - velocity
    properties:
      velocity:
        description: Travel velocity in kilometers per hour based on most recent validation event (in time)
        type: number
        format: float
        example: 187.5
  blacklist:
    type: array
    items:
      $ref: '#/definitions/blacklistEntry'
  blacklistEntry:
    type: object
    required:
      - blacklistEntryId
    properties:
      blacklistEntryId:
        description: Ever increasing blacklist entry identifier
        type: integer
        format: int64
        example: 42
      ticketId:
        type: string
        example: "5f83125b-8c38-442d-ab8c-ac7f56541462"
      travellerId:
        type: string
        example: "ABC123"
      tokenId:
        type: string
        example: "69772de2-2761-475c-927d-3e7d25d46555"
      expire:
        description: Expire timestamp as ISO 8601:2004 profile extended format (MTS8, chapter 2.3)
        format: date-time
        type: string
  whitelist:
    type: array
    items:
      $ref: '#/definitions/whitelistEntry'
  whitelistEntry:
    type: object
    required:
      - id
      - kid
      - mtb
      - val
    properties:
      id:
        description: Ever increasing whitelist entry identifier
        type: integer
        format: int64
        example: 42
      kid:
        description: Whitelisted token public key thumbprint
        type: string
        example: "16:samtrafiken"
      mtb:
        description: Signed MTB
        type: string
        format: base64url
        example: "v2F2QmExYXBZAmSDWJ6_Y2FsZ2..."
      priority:
        description: MTB priority (a lower value has higher priority)
        type: integer
        format: int64
        example: 1
      val:
        description: Entry validity period as ISO 8601:2004 time interval format (MTS8, chapter 2.5) in start/end or start/duration format
        type: string
        example: "20070301T1300/20080511T1530"
      ticketId:
        description: Unique identifier for ticket
        type: string
        example: "5f83125b-8c38-442d-ab8c-ac7f56541462"
  validationReport:
    type: array
    items:
      $ref: '#/definitions/ticketEvent'
  geoPosition:
    description: Geographical position (WGS84 decimal)
    type: object
    required:
      - lat
      - long
    properties:
      lat:
        description: Latitude
        type: number
        format: double
        example: 59.329627
      long:
        description: Longitude
        type: number
        format: double
        example: 18.059201
      alt:
        description: Altitude
        type: number
        format: double
        example: 10.2
  mtbReference:
    description: Reference to MTB identified by pid and issuer signature
    type: object
    required:
      - pid
      - issuerSignature
    properties:
      pid:
        description: Participant identifier
        type: integer
        format: int64
        example: 1
      issuerSignature:
        description: MTB issuer signature
        type: string
        format: base64url
        example: "MEQCIGSYn88hmpE8h0zvFfn+Pvx..."
  deviceReference:
    description: Device reference, unique reference for device that creates device signed tickets
    type: object
    required:
      - pid
      - did
    properties:
      pid:
        description: Participant identifier
        type: integer
        format: int64
        example: 1
      did:
        description: Device identifier
        type: string
        format: base64url
        example: "U2FtdHJhZmlrZW4="
  ticketEventResult:
    description: |
      The result of a ticket inspection or validation operation registration
    type: object
    properties:
      ticketEventPassengerMessage:
        description: |
          Message to be presented to passenger when registering an inspection
          or validation event
        type: string
        example: "Valid"
      ticketEventInspectMessage:
        description: |
          Message to be presented to inspector when registering an inspection event
        type: string
        example: "Valid ticket"
      ticketEventStatus:
        description: |
          Status code for inspection or validation event
        type: integer
        format: int32
        example: 0
      ticketMetadata:
        $ref: '#/definitions/ticketMetadata'
      ticketEvent:
        $ref: '#/definitions/ticketEvent'
      ticketActivationStatus:
        $ref: '#/definitions/ticketActivationStatus'
  ticketActivationStatus:
    description: Activation status
    type: object
    required:
      - active
    properties:
      active:
        description: True if ticket is active, otherwise false.
        type: boolean
      relativeValidity:
        description: Validity period in ISO 8601 duration format (MTS8, chapter 2.4)
        type: string
        example: PT24H
      latestActivation:
        description: Date and time for latest activation as ISO 8601:2004 profile
          extended format (MTS8, chapter 2.3)
        type: string
        format: date-time
        example: '2020-08-28T14:20:39+00:00'
      latestActivationExpire:
        description: Date and time for expiration of latest activation as ISO 8601:2004 profile
          extended format (MTS8, chapter 2.3)
        type: string
        format: date-time
        example: '2020-08-29T03:00:00+00:00'
      numberOfActivations:
        description: |
          Total number of times the product set can be activated
        type: integer
        format: int64
        example: 1
      remainingActivations:
        description: |
          Remaining number of times the product set can be activated
        type: integer
        format: int64
        example: 1
  ticketMetadata:
    description: Metadata associated with a ticket
    type: object
    properties:
      relativeValidityStart:
        description: Start of ticket validity period as ISO 8601:2004 profile extended format (MTS8, chapter 2.3)
        format: date-time
        type: string
        example: "2021-08-17T09:15:00Z"
      travellerPhotoURL:
        description: URL to photo of traveller
        type: string
        example: "https://example.com/my-photo.jpg"
      ticketEventIds:
        description: List of all event identifiers associated with this ticket
        type: array
        items:
          type: string
        example:
          - "ce81fb07-5e91-4fcd-bdf5-4cf07c24d16f"
          - "a775bdcf-95ac-4e05-9af4-4a627e10ebbb"
  ticketEvent:
    description: Ticket event data from inspection or validator device
    type: object
    required:
      - time
      - ticketId
      - localEventId
    properties:
      time:
        description: Timestamp as ISO 8601:2004 profile extended format (MTS8, chapter 2.3)
        format: date-time
        type: string
        example: "2021-08-17T09:15:00Z"
      ticketId:
        description: Unique identifier for ticket
        type: string
        example: "5f83125b-8c38-442d-ab8c-ac7f56541462"
      eventId:
        description: Event identifier (allocated at event creation)
        type: string
        example: "19cc3963-692b-4369-8eea-529fba1c138a"
      localEventId:
        description: |
          Event identifier (allocated at validation/inspection).
          This property MUST be provided in order to detect retransmissions.
          Even though the scope of this property is (pid,entity_id), it is
          RECOMMENDED that it is generated as globally unique using UUIDv4.
        type: string
        example: fc4a1663-e85f-45a3-9b7f-e09758dd2d6d
      eventType:
        description: Type of event, inspection or validation
        type: string
        enum:
          - inspection
          - validation
        example: "validation"
      eventResult:
        title: Result code
        description: |
          0 = success
          1 = other failure
          2 = failed spatial constraints
          3 = failed time constraints
          4 = failed device header conditions
          5 = failed issuer signature validation
          6 = failed device signature validation
          7 = failed blacklist check
          8 = failed passback check
          9 = failed fraud check
        type: integer
        enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          - 9
        example: 5
      eventReason:
        description: Reason for failure/success
        type: string
        example: "Issuer signature validation failed"
      mtbReference:
        $ref: '#/definitions/mtbReference'
      deviceReference:
        $ref: '#/definitions/deviceReference'
      geo:
        $ref: '#/definitions/geoPosition'
      modeOfTransport:
        description: Mode of transport (e.g., bus, train or tram)
        type: string
        example: "bus"
      zone:
        description: Zone information
        type: object
        required:
          - pid
          - zoneId
        properties:
          pid:
            description: Participant identifier associated with zone
            type: integer
            format: int64
            example: 1
          zoneId:
            description: Zone identifier
            type: string
            example: "zone1"
      service:
        description: Service information
        type: object
        required:
          - pid
          - serviceId
        properties:
          pid:
            description: Participant identifier associated with service, trip and block
            type: integer
            format: int64
            example: 1
          serviceId:
            description: |
              Service identifier. May be a line number, e.g. 3 for bus number 3 or 437 for
              train number 437.
            type: string
            example: "3"
          tripId:
            description: Trip identifier
            type: string
            example: "15234/97854"
          blockId:
            description: |
              Block identifier. A block consists of a single trip or many sequential trips
              made using the same vehicle, defined by shared service days and blockId.
            type: string
            example: "A"
      stopArea:
        description: Stop area information
        type: object
        required:
          - pid
          - stopAreaId
        properties:
          pid:
            description: Participant identifier associated with stop area
            type: integer
            format: int64
            example: 1
          stopAreaId:
            description: Identifier for current stop area
            type: string
            example: "1"
          nextStopAreaId:
            description: Identifier for next stop area
            type: string
            example: "2"
      validator:
        type: object
        properties:
          validatorId:
            description: What validator originated the event
            type: string
            example: "d494e5c8-12d9-4265-a78c-6bfe881280a1"
          location:
            description: Where is validator mounted (e.g., vehicle number)
            type: string
            example: "100"
          sublocation:
            description: More specific location information (e.g., door number)
            type: string
            example: "A1"
      operatingDayDate:
        description: Date of the operating day
        format: date
        type: string
        example: "2021-01-23"
      tokenTransaction:
        $ref: '#/definitions/tokenTransaction'
      emvTransaction:
        $ref: '#/definitions/emvTransaction'
  tickleMacros:
    type: object
    required:
      - pid
      - serial
      - macros
    properties:
      pid:
        type: integer
        format: int64
        example: 1
      serial:
        type: integer
        format: int64
        example: 1
      macros:
        type: array
        items:
          $ref: '#/definitions/tickleMacro'
  tickleMacro:
    type: object
    required:
      - name
      - condition
    properties:
      name:
        type: string
        example: "#weekends"
      description:
        type: string
        example: "Definition of weekends"
      condition:
        type: string
        example: "@R/2016W016/P1W/P2D"
  tokenTransaction:
    description: MTS7 transaction information
    type: object
    required:
      - tpk
      - aiData
      - aiRequest
      - aiResponse
    properties:
      tpk:
        $ref: '#/definitions/jwkPublic'
      aiData:
        $ref: '#/definitions/aiData'
      aiRequest:
        $ref: '#/definitions/aiRequest'
      aiResponse:
        $ref: '#/definitions/aiResponse'
      tokenIssuer:
        $ref: '#/definitions/tokenIssuer'
      tokenId:
        $ref: '#/definitions/tokenId'
    emvTransaction:
      description: Contactless payment card (EMV) transaction information
      type: object
      properties:
        tokenId:
          $ref: '#/definitions/tokenId'
        deviceId:
          description: Device (terminal) identifier
          type: string
          example: "2EF23D68-F810-4BC2-82E6-C17795D48F60"
        deviceTransactionId:
          description: Device (terminal) transaction identifier
          type: string
          example: "7997D984-7164-4BC3-9B0F-D4F575F6780F"
        transactionId:
          description: Payment transaction identifier
          type: string
          example: "4B3249E2-EFFD-4C42-B604-D632C58E46FC"
        aid:
          description: Application Identifier
          type: string
          pattern: "^[0-9A-Fa-f]{10,32}$"
          example: A0000008381010
        closed:
          description: Card is closed loop
          type: boolean
  jwkPublic:
    type: object
    description: Public JSON Web Key (RFC 7517)
    required:
      - kty
      - kid
    properties:
      kty:
        description: JWA key type
        type: string
        enum:
          - RSA
          - EC
        example: "EC"
      kid:
        description: JWK key identifier
        type: string
        example: "k2"
      crv:
        description: Curve type (required for kty=EC)
        type: string
        example: "P-256"
      x:
        description: EC x coordinate (required for kty=EC)
        type: string
        format: byte
        example: "f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU"
      y:
        description: EC y coordinate (required for kty=EC)
        type: string
        format: byte
        example: "x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0"
      n:
        description: RSA modulus parameter (required for kty=RSA)
        type: string
        format: byte
        example: "pjdss8ZaDfEH6K6U7GeW2nxDqR4IP049fk1fK0lndimb..."
      e:
        description: RSA exponent parameter (required for kty=RSA)
        type: string
        format: byte
        example: "AQAB"
  aiData:
    description: Data used to produce Authentication input for token authentication
    type: object
    required:
      - time
      - terminalId
    properties:
      pid:
        description: Terminal Participant Identifier
        type: integer
        format: int64
        example: 1
      terminalId:
        description: Identifier of the terminal
        type: string
      aid:
        description: Full AID (in lowercase hex) as read from the PICC
        type: string
      signatureCounter:
        description: Signature counter as read from the PICC
        type: integer
        format: int64
      time:
        description: Current time as ISO 8601:2004 profile extended format (MTS8, chapter 2.3)
        type: string
        format: date-time
        example: "2021-08-17T09:15:00Z"
      loc:
        description: Current geographical location of the terminal (WGS84 decimal tuple)
        type: string
        pattern: "^\\-?[0-9]*(\\.[0-9]+)?,\\-?[0-9]*(\\.[0-9]+)?$"
        example: "59.329627,18.059201"
  aiRequest:
    description: Authentication request as sent to the PICC
    type: string
    format: base64url
  aiResponse:
    description: Authentication response as received from PICC
    type: string
    format: base64url
